@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use '../helpers/grid';
@use '../helpers/break';
@use '../helpers/custom-properties';

$column-count : 6 !default;
$gaps         : clamp(64px, 6vh, 128px) clamp(16px, 3vw, 32px) !default;
$max-width    : 1280px !default;
$min-width    : 480px !default;
$set-children : true !default;

$gap-spacer   : var(--grid-gap, 0px);
$gap-gutter   : var(--grid-gap, 0px);

@if ( meta.type-of($gaps) == 'list' ) {
  $gap-spacer : list.nth($gaps, 1);
  $gap-gutter : if(list.length($gaps) > 1, list.nth($gaps, 2), list.nth($gaps, 1));
}

@mixin inherit() { @include grid.inherit(); }

@mixin base($column-count : $column-count, $gaps : $gaps, $max-width : $max-width, $min-width : $min-width) {

  $gap-spacer   : $gaps;
  $gap-gutter   : $gaps;

  @if ( meta.type-of($gaps) == 'list' ) {
    $gap-spacer : list.nth($gaps, 1);
    $gap-gutter : if(list.length($gaps) > 1, list.nth($gaps, 2), list.nth($gaps, 1));
  }

  --grid-base-column-count     : #{$column-count};
  --grid-base-column-width     : calc(#{$max-width} / var(--grid-column-count) - (var(--grid-gutter, 0px) - (var(--grid-gutter, 0px) / var(--grid-column-count))));
  --grid-base-template-columns : minmax(0, 1fr) repeat(var(--grid-base-column-count), minmax(0, var(--grid-base-column-width))) minmax(0, 1fr);
  --grid-base-gutter           : #{$gap-gutter};
  --grid-base-spacer           : #{$gap-spacer};
  --grid-base-column           : 2 / -2;

  display               : grid;
  grid-template-columns : var(--grid-base-template-columns, auto);
  grid-gap              : var(--grid-base-spacer, 0px) var(--grid-base-gutter, 0px);
  align-content         : start; 

  > * {  grid-column : var(--grid-base-column); }

  @content;

}

@mixin blowout() {
  @include custom-properties.negative-single-gutter-width(var(--breakpoint-max, #{$max-width}));
  padding-left  : var(--blowout-padding-left,  max(#{$gap-gutter}, var(--negative-single-gutter-width)));
  padding-right : var(--blowout-padding-right, max(#{$gap-gutter}, var(--negative-single-gutter-width)));
  @supports not ( width:max(1px, 5px)) {
    padding-left  : var(--blowout-padding-left,  var(--negative-single-gutter-width));
    padding-right : var(--blowout-padding-right, var(--negative-single-gutter-width));
  }
}

@mixin wrap($column-count : $column-count, $gaps : $gaps, $max-width : $max-width, $min-width : $min-width) {

  --grid-column-count     : #{$column-count};
  --grid-column-width     : calc(#{$max-width} / var(--grid-column-count) - (var(--grid-gutter, 0px) - (var(--grid-gutter, 0px) / var(--grid-column-count))));
  --grid-template-columns : repeat(var(--grid-column-repeat), minmax(var(--grid-column-width), 1fr));
  --grid-gutter           : #{$gap-gutter};
  --grid-spacer           : #{$gap-spacer};
  --grid-column-repeat    : auto-fill;

  display               : grid;
  grid-template-columns : var(--grid-template-columns, auto);
  grid-gap              : var(--grid-spacer, 0px) var(--grid-gutter, 0px);
  align-content         : start; 

  @content;

}

@mixin no-wrap($column-count : $column-count, $gaps : $gaps, $max-width : $max-width, $min-width : $min-width) {
  
  --grid-column-count     : #{$column-count};
  --grid-column-width     : calc(#{$max-width} / var(--grid-column-count) - (var(--grid-gutter, 0px) - (var(--grid-gutter, 0px) / var(--grid-column-count))));
  --grid-template-columns : repeat(var(--grid-column-count), minmax(0, 1fr));
  --grid-gutter           : #{$gap-gutter};
  --grid-spacer           : #{$gap-spacer};

  display               : grid;
  grid-template-columns : var(--grid-template-columns, auto);
  grid-gap              : var(--grid-spacer, 0px) var(--grid-gutter, 0px);
  align-content         : start; 

  @content;

}